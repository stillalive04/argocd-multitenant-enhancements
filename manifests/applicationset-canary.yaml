# ApplicationSet for Canary Deployment Strategy
# Enables gradual rollouts with automated traffic shifting and rollback

apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: canary-deployment
  namespace: argocd
  labels:
    strategy: canary
    team: platform
spec:
  generators:
  - clusters:
      selector:
        matchLabels:
          environment: production
          deployment-strategy: canary
      values:
        environment: '{{metadata.labels.environment}}'
        cluster: '{{name}}'
  - git:
      repoURL: https://github.com/your-org/app-configs
      revision: HEAD
      directories:
      - path: apps/*/canary
      values:
        app: '{{path.basename}}'
        path: '{{path}}'
  template:
    metadata:
      name: '{{values.app}}-{{values.environment}}-canary'
      labels:
        app: '{{values.app}}'
        environment: '{{values.environment}}'
        strategy: canary
      annotations:
        argocd.argoproj.io/sync-wave: "2"
        notifications.argoproj.io/subscribe.on-sync-succeeded.slack: deployment-alerts
        notifications.argoproj.io/subscribe.on-health-degraded.slack: deployment-alerts
    spec:
      project: '{{values.environment}}-project'
      source:
        repoURL: https://github.com/your-org/helm-charts
        targetRevision: HEAD
        path: charts/{{values.app}}
        helm:
          valueFiles:
          - values-{{values.environment}}.yaml
          - values-canary.yaml
          parameters:
          - name: image.tag
            value: '{{values.version | default "latest"}}'
          - name: deployment.strategy
            value: canary
          - name: canary.enabled
            value: "true"
          - name: canary.steps[0].setWeight
            value: "10"
          - name: canary.steps[1].pause.duration
            value: "2m"
          - name: canary.steps[2].setWeight
            value: "30"
          - name: canary.steps[3].pause.duration
            value: "5m"
          - name: canary.steps[4].setWeight
            value: "50"
          - name: canary.steps[5].analysis.templateName
            value: success-rate-canary
          - name: canary.steps[6].setWeight
            value: "100"
      destination:
        server: '{{server}}'
        namespace: '{{values.environment}}-{{values.app}}'
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
          allowEmpty: false
        syncOptions:
        - CreateNamespace=true
        - PruneLast=true
        - RespectIgnoreDifferences=true
        retry:
          limit: 5
          backoff:
            duration: 5s
            factor: 2
            maxDuration: 3m
      revisionHistoryLimit: 10

---
# Rollout Configuration for Canary Strategy
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: canary-rollout-template
  namespace: argocd
  labels:
    template: canary
spec:
  replicas: 10
  strategy:
    canary:
      # Maximum number of unavailable pods during rollout
      maxUnavailable: 1
      
      # Maximum number of pods that can be created above desired replicas
      maxSurge: 2
      
      # Canary service for traffic splitting
      canaryService: canary-service
      stableService: stable-service
      
      # Traffic routing configuration
      trafficRouting:
        nginx:
          stableIngress: stable-ingress
          additionalIngressAnnotations:
            canary-by-header: X-Canary
            canary-by-header-value: "true"
        
      # Analysis configuration
      analysis:
        templates:
        - templateName: success-rate-canary
        startingStep: 2   # Start analysis after 30% traffic
        args:
        - name: service-name
          value: canary-service
        - name: stable-service-name
          value: stable-service
        - name: prometheus-server
          value: http://prometheus.monitoring.svc.cluster.local:9090
          
      # Canary deployment steps
      steps:
      # Step 1: Deploy canary with 10% traffic
      - setWeight: 10
      - pause:
          duration: 2m
          
      # Step 2: Increase to 30% traffic
      - setWeight: 30
      - pause:
          duration: 5m
          
      # Step 3: Run analysis and increase to 50%
      - analysis:
          templates:
          - templateName: success-rate-canary
          args:
          - name: service-name
            value: canary-service
          - name: stable-service-name
            value: stable-service
      - setWeight: 50
      - pause:
          duration: 10m
          
      # Step 4: Final analysis before full rollout
      - analysis:
          templates:
          - templateName: success-rate-canary
          - templateName: latency-canary
          args:
          - name: service-name
            value: canary-service
          - name: stable-service-name
            value: stable-service
            
      # Step 5: Full rollout
      - setWeight: 100
      
  selector:
    matchLabels:
      app: myapp
      strategy: canary
      
  template:
    metadata:
      labels:
        app: myapp
        strategy: canary
    spec:
      containers:
      - name: app
        image: myapp:latest
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: 512Mi
            cpu: 500m
          limits:
            memory: 1Gi
            cpu: 1000m
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        env:
        - name: VERSION
          value: "canary"

---
# Analysis Template for Canary Success Rate
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: success-rate-canary
  namespace: argocd
spec:
  args:
  - name: service-name
  - name: stable-service-name
  - name: prometheus-server
    value: http://prometheus.monitoring.svc.cluster.local:9090
  metrics:
  - name: canary-success-rate
    interval: 30s
    count: 5
    successCondition: result[0] >= 0.95
    failureLimit: 2
    provider:
      prometheus:
        address: "{{args.prometheus-server}}"
        query: |
          sum(rate(http_requests_total{service="{{args.service-name}}", status!~"5.."}[2m])) /
          sum(rate(http_requests_total{service="{{args.service-name}}"}[2m]))
          
  - name: canary-vs-stable-success-rate
    interval: 30s
    count: 5
    successCondition: result[0] >= -0.05  # Canary success rate should not be more than 5% lower than stable
    failureLimit: 2
    provider:
      prometheus:
        address: "{{args.prometheus-server}}"
        query: |
          (
            sum(rate(http_requests_total{service="{{args.service-name}}", status!~"5.."}[2m])) /
            sum(rate(http_requests_total{service="{{args.service-name}}"}[2m]))
          ) - (
            sum(rate(http_requests_total{service="{{args.stable-service-name}}", status!~"5.."}[2m])) /
            sum(rate(http_requests_total{service="{{args.stable-service-name}}"}[2m]))
          )

---
# Analysis Template for Canary Latency
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: latency-canary
  namespace: argocd
spec:
  args:
  - name: service-name
  - name: stable-service-name
  - name: prometheus-server
    value: http://prometheus.monitoring.svc.cluster.local:9090
  metrics:
  - name: canary-latency-p95
    interval: 30s
    count: 5
    successCondition: result[0] <= 500
    failureLimit: 2
    provider:
      prometheus:
        address: "{{args.prometheus-server}}"
        query: |
          histogram_quantile(0.95,
            sum(rate(http_request_duration_seconds_bucket{service="{{args.service-name}}"}[2m])) by (le)
          ) * 1000
          
  - name: canary-vs-stable-latency
    interval: 30s
    count: 5
    successCondition: result[0] <= 100  # Canary latency should not be more than 100ms higher than stable
    failureLimit: 2
    provider:
      prometheus:
        address: "{{args.prometheus-server}}"
        query: |
          (
            histogram_quantile(0.95,
              sum(rate(http_request_duration_seconds_bucket{service="{{args.service-name}}"}[2m])) by (le)
            ) * 1000
          ) - (
            histogram_quantile(0.95,
              sum(rate(http_request_duration_seconds_bucket{service="{{args.stable-service-name}}"}[2m])) by (le)
            ) * 1000
          )

---
# Services for Canary Deployment
apiVersion: v1
kind: Service
metadata:
  name: stable-service-template
  namespace: argocd
  labels:
    template: canary
spec:
  selector:
    app: myapp
    strategy: canary
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: canary-service-template
  namespace: argocd
  labels:
    template: canary
spec:
  selector:
    app: myapp
    strategy: canary
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
# Stable Ingress for Canary Deployment
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: stable-ingress-template
  namespace: argocd
  labels:
    template: canary
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - myapp.example.com
    secretName: myapp-tls
  rules:
  - host: myapp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: stable-service
            port:
              number: 80

---
# HorizontalPodAutoscaler for Canary Deployments
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: canary-hpa-template
  namespace: argocd
  labels:
    template: canary
spec:
  scaleTargetRef:
    apiVersion: argoproj.io/v1alpha1
    kind: Rollout
    name: canary-rollout
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
